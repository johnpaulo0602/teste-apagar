apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ default "worker" .Values.worker.name }}
  labels:
    app: {{ default "worker" .Values.worker.name }}
spec:
  replicas: {{ default 1 .Values.worker.hpa.minReplicas }}
  selector:
    matchLabels:
      app: {{ default "worker" .Values.worker.name }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.global.rollingUpdate.maxSurge }} # Define o número máximo de Pods excedentes
      maxUnavailable: {{ .Values.global.rollingUpdate.maxUnavailable }} # Define o númo máximo de Pods indisponíveis
    type: RollingUpdate
  minReadySeconds: {{ .Values.global.minReadySeconds }} # Os Pods antigos ainda estarão em execução quando o novo Pod for estabelecido. Após 120s os Pods antigos serão mortos
  revisionHistoryLimit: 1
  template:
    metadata:
      labels:
        app: {{ default "worker" .Values.worker.name }}
        release: {{ default "worker" .Values.worker.name }}
      annotations:
        timestamp: {{ now | quote }}
    spec:
      serviceAccountName: {{ .Release.Name }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - {{ default "worker" .Values.worker.name }} # Opcionalmente meus pods irão rodar em nodes diferentes.
              topologyKey: kubernetes.io/hostname # Uma label que exista nos nodes.
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: "karpenter.sh/capacity-type"
                  operator: In
                  values:
                    - "spot"
                - key: "karpenter.sh/nodepool"
                  operator: In
                  values:
                    - {{ .Values.global.nodeAffinityName }}
                - key: "kubernetes.io/arch"
                  operator: In
                  values:
                    - "amd64"
      terminationGracePeriodSeconds: 60 # Aguarda que o pod seja finalizado em até 60s.
      priorityClassName: system-cluster-critical
      containers:
      - name: {{ default "worker" .Values.worker.name }}
        image: {{ .Values.global.image.repository }}:{{ .Values.global.image.tag }}
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        resources:
          requests:
            cpu: {{ .Values.worker.requests.cpu }}
            memory: {{ .Values.worker.requests.memory }}
          limits:
            cpu: {{ .Values.worker.limits.cpu }}
            memory: {{ .Values.worker.limits.memory }}
        env:
          - name: SERVICE
            value: "worker"
        ports:
        - containerPort: {{ .Values.worker.containerPort }}
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: {{ .Values.worker.healthcheckPath }}
            port: {{ .Values.worker.containerPort }}
          initialDelaySeconds: 60 # Aguarda 60s para fazer a primeira checagem
          timeoutSeconds: 30 # Timeout máximo de 1s
          periodSeconds: 30 # Faz a checagem a cada 60s
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: {{ .Values.worker.healthcheckPath }}
            port: {{ .Values.worker.containerPort }}
          initialDelaySeconds: 60 # Aguarda 60s para fazer a primeira checagem
          timeoutSeconds: 30 # Timeout máximo de 1s
          periodSeconds: 30 # Faz a checagem a cada 60s

